{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","SectionAddTask/styled.js","SectionAddTask/index.js","SectionDisplayTasks/styled.js","SectionDisplayTasks/index.js","Header/index.js","Footer/styled.js","Footer/index.js","Container/styled.js","Container/index.js","useTasks.js","App.js","serviceWorker.js","GlobalStyle.js","index.js","theme.js"],"names":["StyledForm","styled","form","theme","colors","backgroundColor","breakpoints","mobile","Input","input","concrete","Button","button","teal","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","current","focus","ref","value","type","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","done","lightGrey","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","onClick","content","Wrapper","ControlButton","Buttons","toggleHideDone","setAllDone","length","disabled","every","Header","h2","SectionAddTask","title","body","ListBox","div","SectionDisplayTasks","extraHeaderContent","FooterInfo","footer","Footer","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","useTasks","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10aa2c4b.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 10px;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 2px solid ${({ theme }) => theme.colors.concrete};\n`;\n\nexport const Button = styled.button`\n    padding: 10px;\n    background-color: ${({ theme }) => theme.colors.teal};\n    border: none;\n    color: white;\n    transition: 0.5s;\n\n    &:hover {\n        filter: brightness(110%);\n        transform: scale(1.1);\n        cursor: pointer;\n    }\n\n    &:active {\n        filter: brightness(120%);\n    }\n\n@media(max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        &:hover {\n            transform: scaleY(1.1);\n        }\n    }\n`;","import React, { useState, useRef } from \"react\";\nimport { StyledForm, Input, Button } from \"./styled\";\n\nconst Form = ({ addNewTask }) => {\n\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimmedNewTaskContent = newTaskContent.trim();\n\n        if (!trimmedNewTaskContent) {\n            return;\n        }\n\n        addNewTask(trimmedNewTaskContent);\n        setNewTaskContent(\"\");\n        inputRef.current.focus();\n    };\n\n    return (\n        <StyledForm onSubmit={onFormSubmit}>\n            <Input\n                ref={inputRef}\n                value={newTaskContent}\n                type=\"text\"\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <Button>Dodaj zadanie!</Button>\n        </StyledForm>\n    )\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    background-color: white;\n    padding: 0px;\n    margin: 0px;\n    display: grid;\n    list-style: none;\n`;\n\nexport const Item = styled.li`\n    padding: 10px;\n    border-bottom: 2px solid ${({ theme }) => theme.colors.concrete};\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 20px;\n    align-items: center;\n\n    ${({ hidden }) => hidden && css`\n        display: none;\n    `}\n`;\n\nexport const Content = styled.span`\n    overflow-wrap: break-word;\n    word-wrap: break-word;\n    word-break: break-all;\n    hyphens: auto;\n    text-align: justify;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n        color: ${({ theme }) => theme.colors.lightGrey};\n    `}\n`;\n\nexport const Button = styled.button`\n    text-decoration: none;\n    min-width: 40px;\n    min-height: 40px;\n    padding: 10px;\n    color: white;\n    border: none;\n    transition: 0.5s;\n\n    ${({ toggleDone }) => toggleDone && css`\n        background-color: hsl(120, 100%, 25%);\n\n        &:hover{\n            background-color: hsl(120, 100%, 35%);\n            cursor: pointer;\n        }\n\n        &:active{\n            background-color: hsl(120, 100%, 45%);\n        }\n    `}\n\n    ${({ remove }) => remove && css`\n        background-color: hsl(0, 100%, 40%);\n\n        &:hover{\n            background-color: hsl(0, 100%, 50%);\n            cursor: pointer;\n        }\n\n        &:active{\n            background-color: hsl(0, 100%, 70%);\n        }\n    `}\n`;","import React from \"react\";\nimport { List, Item, Content, Button } from \"./styled\";\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n\n  <List>\n    {tasks.map(task => (\n\n      <Item\n        key={task.id}\n        hidden={task.done && hideDone}\n      >\n        <Button\n          toggleDone\n          onClick={() => toggleTaskDone(task.id)}\n        >\n          {task.done ? \"âœ“\" : \"\"}\n        </Button>\n\n        <Content done={task.done}>\n          {task.content}\n        </Content>\n\n        <Button\n          remove\n          onClick={() => removeTask(task.id)}\n        >\n          X\n        </Button>\n\n      </Item>\n    ))}\n  </List>\n);\n\nexport default Tasks;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.span`\n    display: flex;\n    align-content: center;\n    flex-wrap: wrap;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-content: center;\n    }\n`;\n\nexport const ControlButton = styled.button`\n    font-size: 15px;\n    color: ${({ theme }) => theme.colors.teal};\n    background: none;\n    border: none;\n    margin-left: 20px;\n    transition: 0.5s;\n    padding: 10px;\n\n    &:hover {\n        cursor: pointer;\n        filter: brightness(110%);\n    }\n\n    &:active {\n        cursor: pointer;\n        filter: brightness(120%);\n    }\n\n    &:disabled {\n        cursor: pointer;\n        color: ${({ theme }) => theme.colors.lightGrey};\n    }\n`;","import React from \"react\";\nimport { Wrapper, ControlButton } from \"./styled\";\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\n\n  tasks.length > 0 && (\n    <Wrapper>\n      <ControlButton\n        onClick={toggleHideDone}\n        disabled={tasks.every(({ done }) => !done)}\n      >\n        {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\n      </ControlButton>\n\n      <ControlButton\n        onClick={setAllDone}\n        disabled={tasks.every(({ done }) => done)}\n      >\n        UkoÅ„cz wszystkie\n      </ControlButton>\n    </Wrapper>\n  )\n);\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const Header = styled.h2`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 3px;\n`;","import React from \"react\";\nimport { Header } from \"./styled\";\n\nconst SectionAddTask = ({ title, body }) => (\n    <section>\n        <Header>{title}</Header>\n        {body}\n    </section>\n);\n\nexport default SectionAddTask;","import styled from \"styled-components\";\n\nexport const Header = styled.h2`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 3px;\n    display: grid;\n    grid-template-columns: 1fr auto;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        grid-template-columns: auto;\n    }\n`;\n\nexport const ListBox = styled.div`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n`;","import React from \"react\";\nimport { Header, ListBox } from \"./styled\";\n\nconst SectionDisplayTasks = ({ title, body, extraHeaderContent }) => (\n    <section>\n        <Header>\n            <span>{title}</span>\n            {extraHeaderContent}\n        </Header>\n\n        <ListBox>\n            {body}\n        </ListBox>\n    </section>\n);\n\nexport default SectionDisplayTasks;","import React from \"react\";\n\nconst Header = ({title}) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const FooterInfo = styled.footer`\n    text-align: center;\n    margin: 20px auto;\n    font-size: 14px;\n    color: ${({ theme }) => theme.colors.lightGrey};\n`;","import React from \"react\";\nimport { FooterInfo } from \"./styled\";\n\nconst Footer = ({ title }) => (\n    <FooterInfo>\n        {title}\n    </FooterInfo>\n);\n\nexport default Footer;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    max-width: 900px;\n    margin: 0 auto;\n    padding: 20px;\n`;","import React from \"react\";\nimport { Wrapper } from \"./styled\";\n\nconst Container = ({ children }) => (\n    <Wrapper>\n        {children}\n    </Wrapper>\n);\n\nexport default Container;","import { useState, useEffect } from \"react\";\n\nconst getInitialTasks = () => {\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n\n    return tasksFromLocalStorage\n        ? JSON.parse(tasksFromLocalStorage)\n        : []\n};\n\nexport const useTasks = () => {\n\n    const [tasks, setTasks] = useState(getInitialTasks);\n\n    useEffect(() => {\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }, [tasks]);\n\n\n    const removeTask = (id) => {\n        setTasks(tasks => tasks.filter(task => task.id !== id))\n    };\n\n    const toggleTaskDone = (id) => {\n        setTasks(tasks => tasks.map(task => {\n\n            if (task.id === id) {\n                return {\n                    ...task,\n                    done: !task.done\n                };\n            };\n\n            return task;\n        }));\n    };\n\n    const setAllDone = () => {\n        setTasks(tasks => tasks.map(task => ({\n            ...task,\n            done: true,\n        })))\n    };\n\n    const addNewTask = (content) => {\n        setTasks(tasks => [\n            ...tasks,\n            {\n                content,\n                done: false,\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n            },\n        ]);\n    };\n\n    return {\n        tasks,\n        removeTask,\n        toggleTaskDone,\n        setAllDone,\n        addNewTask\n    }\n};","import React, { useState } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport SectionAddTask from \"./SectionAddTask\";\nimport SectionDisplayTasks from \"./SectionDisplayTasks\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Container from \"./Container\";\nimport { useTasks } from \"./useTasks\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone)\n  };\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask\n  } = useTasks();\n\n  return (\n    <Container>\n\n      <Header title=\"Lista zadaÅ„\" />\n\n      <SectionAddTask\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <SectionDisplayTasks\n        title=\"Lista zadaÅ„\"\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n\n          />\n        }\n      />\n\n      <Footer title=\"Â© MichaÅ‚ Adamczyk 2020. Wszystkie prawa zastrzeÅ¼one!\" />\n\n    </Container>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n    }\n\n    *, ::after, ::before {\n        box-sizing: inherit;\n    }\n\n    body {\n        font-family: 'Montserrat', sans-serif;\n        background-color: ${({ theme }) => theme.colors.concrete};\n        margin: 20px auto;\n        line-height: 1.4;\n        color: rgb(49, 49, 49);\n    }\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from './theme';\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"./GlobalStyle\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","export const theme = {\n    colors: {\n        backgroundColor: \"white\",\n        teal: \"#008080\",\n        lightGrey: \"#ccc\",\n        concrete: \"#F2F2F2\",\n    },\n\n    breakpoints: {\n        mobile: 767,\n    }\n};"],"sourceRoot":""}