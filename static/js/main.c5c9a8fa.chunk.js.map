{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","SectionAddTask/index.js","SectionDisplayTasks/index.js","Header/index.js","Footer/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","type","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","SectionAddTask","title","body","SectionDisplayTasks","extraHeaderContent","Header","Footer","Container","children","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5c9a8fa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.css\";\n\nconst Form = ({addNewTask}) => {\n\n    const [newTaskContent, setNewTaskContent] = useState(\"\"); \n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        addNewTask(newTaskContent.trim());\n        setNewTaskContent(\"\");\n    };\n\n    return (\n        <form className=\"addTask__form\" onSubmit={onFormSubmit}>\n            <input \n                value={newTaskContent}\n                className=\"addTask__input\"\n                type=\"text\"\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({target}) => setNewTaskContent(target.value)}\n            />\n            <button className=\"addTask__button\">Dodaj zadanie!</button>\n        </form>\n    )\n\n};\n\nexport default Form;","import React from \"react\";\nimport \"./style.css\";\n\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\n\n    <ul className=\"displayTasks__list\">\n\n      {tasks.map(task => (\n        \n          <li\n            key={task.id}\n            className={`\n            displayTasks__listItem\n            ${task.done && hideDone ? \"displayTasks__listItem--hidden\" : \"\"}`}\n          >\n              <button \n                className=\"displayTasks__toggleDoneButton\"\n                onClick={() => toggleTaskDone(task.id)}\n              >\n                {task.done ? \"✓\" : \"\"}\n              </button>\n                    \n              <span className={`displayTasks__content ${task.done ? \"displayTasks__content--done\" : \"\"}`}>\n                {task.content}\n              </span>\n            \n              <button\n                className=\"displayTasks__removeButton\"\n                onClick={() => removeTask(task.id)}\n              >\n                X\n              </button>\n\n          </li>\n      ))}\n\n    </ul>\n);\n\nexport default Tasks;","import React from \"react\";\nimport \"./style.css\"\n\nconst Buttons = ({tasks, hideDone, toggleHideDone, setAllDone}) => (\n\n    tasks.length > 0 && (\n        <span className=\"displayTasks__buttonBox\">\n            <button\n              onClick={toggleHideDone}\n              className=\"displayTasks__controlButtons\"\n              disabled={tasks.every(({done}) => !done)}\n            >\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n            </button>\n            <button\n              onClick={setAllDone}\n              className=\"displayTasks__controlButtons\"\n              disabled={tasks.every(({done}) => done)}\n            >\n            Ukończ wszystkie\n            </button>\n        </span>\n        )\n);\n\nexport default Buttons;","import React from \"react\";\nimport \"./style.css\";\n\nconst SectionAddTask = ({title, body}) => (\n\n    <section className=\"addTask\">\n        <h2 className=\"addTask__header\">{title}</h2>\n        {body}\n    </section>\n);\n\nexport default SectionAddTask;\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nconst SectionDisplayTasks = ({title, body, extraHeaderContent} ) => (\n\n    <section className=\"displayTasks\">\n\n        <h2 className=\"displayTasks__header\">\n            <span>{title}</span>\n            {extraHeaderContent}\n        </h2>\n\n        <div className=\"displayTasks__listBox\">\n            {body}\n        </div>\n\n    </section>\n\n);\n\nexport default SectionDisplayTasks;","import React from \"react\";\n\nconst Header = ({title}) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = ({title}) => (\n    <footer className=\"footer\">\n        {title}\n    </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nconst Container = ({children}) => (\n\n<div className=\"container\">\n    {children}\n</div>\n\n);\n\nexport default Container;","import React, {useState} from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport SectionAddTask from \"./SectionAddTask\";\nimport SectionDisplayTasks from \"./SectionDisplayTasks\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Container from \"./Container\";\n\nfunction App() {\n\n  const [hideDone, setHideDone] = useState(false);\n\n  const [tasks, setTasks] = useState([\n    {id: 1, content: \"przykładowe zadanie\", done: false},\n  ]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone)\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id))\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n\n      if(task.id === id){\n        return {\n          ...task,\n          done: !task.done\n        };\n      };\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n      setTasks(tasks => tasks.map(task => ({\n        ...task,\n        done: true,\n      })))\n  };\n\n  const addNewTask = (content) => {\n    setTasks( tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length-1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  return (\n    <Container>\n\n        <Header title=\"Lista zadań\"/>\n\n        <SectionAddTask\n            title=\"Dodaj nowe zadanie\"\n            body={<Form addNewTask={addNewTask} />}\n        />\n\n        <SectionDisplayTasks\n            title=\"Lista zadań\"\n            extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              hideDone={hideDone}\n              toggleHideDone={toggleHideDone}\n              setAllDone={setAllDone}\n            />\n            }\n            body={\n              <Tasks\n                tasks={tasks}\n                hideDone={hideDone}\n                removeTask={removeTask}\n                toggleTaskDone={toggleTaskDone}\n              \n              />\n              \n            }\n        />\n\n        <Footer title=\"© Michał Adamczyk 2020. Wszystkie prawa zastrzeżone!\" />\n\n    </Container>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}