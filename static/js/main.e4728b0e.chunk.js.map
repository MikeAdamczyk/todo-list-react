{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/ControlButtons.js","features/tasks/Buttons/index.js","features/tasks/SectionAddTask/styled.js","features/tasks/SectionAddTask/index.js","features/tasks/SectionDisplayTasks/styled.js","features/tasks/SectionDisplayTasks/index.js","common/Header/index.js","common/Footer/styled.js","common/Footer/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js","features/tasks/tasksSlice.js"],"names":["saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","getTasksFromLocalStorage","parse","getItem","StyledForm","styled","form","theme","colors","backgroundColor","breakpoints","mobile","Input","input","concrete","Button","button","teal","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","addTask","content","done","id","nanoid","current","focus","ref","value","type","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","lightGrey","toggleDone","remove","TasksList","useSelector","selectTasks","hideDone","map","task","key","onClick","toggleTaskDone","removeTask","Wrapper","ControlButton","exampleTasks","Buttons","length","toggleHideDone","disabled","every","setAllDone","Header","h2","ButtonBox","SectionAddTask","title","body","fetchExampleTasks","ListBox","div","SectionDisplayTasks","extraHeaderContent","FooterInfo","footer","Footer","Container","children","Tasks","App","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExampleTasks","require","setTasks","call","put","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","taskReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","tasksSlice","createSlice","name","initialState","reducers","payload","push","state","index","findIndex","splice","actions"],"mappings":"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","file":"static/js/main.e4728b0e.chunk.js","sourcesContent":["const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = (tasks) => {\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n}\n\nexport const getTasksFromLocalStorage = () =>\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 10px;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 2px solid ${({ theme }) => theme.colors.concrete};\n`;\n\nexport const Button = styled.button`\n    padding: 10px;\n    background-color: ${({ theme }) => theme.colors.teal};\n    border: none;\n    color: white;\n    transition: 0.5s;\n\n    &:hover {\n        filter: brightness(110%);\n        transform: scale(1.1);\n        cursor: pointer;\n    }\n\n    &:active {\n        filter: brightness(120%);\n    }\n\n@media(max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        &:hover {\n            transform: scaleY(1.1);\n        }\n    }\n`;","import React, { useState, useRef } from \"react\";\nimport { StyledForm, Input, Button } from \"./styled\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"../tasksSlice\";\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nconst Form = () => {\n\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const dispatch = useDispatch();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimmedNewTaskContent = newTaskContent.trim();\n\n        if (!trimmedNewTaskContent) {\n            return;\n        }\n\n        dispatch(addTask({\n            content: trimmedNewTaskContent,\n            done: false,\n            id: nanoid(),\n        }));\n\n        setNewTaskContent(\"\");\n        inputRef.current.focus();\n    };\n\n    return (\n        <StyledForm onSubmit={onFormSubmit}>\n            <Input\n                ref={inputRef}\n                value={newTaskContent}\n                type=\"text\"\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <Button>Dodaj zadanie!</Button>\n        </StyledForm>\n    )\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    background-color: white;\n    padding: 0px;\n    margin: 0px;\n    display: grid;\n    list-style: none;\n`;\n\nexport const Item = styled.li`\n    padding: 10px;\n    border-bottom: 2px solid ${({ theme }) => theme.colors.concrete};\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 20px;\n    align-items: center;\n\n    ${({ hidden }) => hidden && css`\n        display: none;\n    `}\n`;\n\nexport const Content = styled.span`\n    overflow-wrap: break-word;\n    word-wrap: break-word;\n    word-break: break-all;\n    hyphens: auto;\n    text-align: justify;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n        color: ${({ theme }) => theme.colors.lightGrey};\n    `}\n`;\n\nexport const Button = styled.button`\n    text-decoration: none;\n    min-width: 40px;\n    min-height: 40px;\n    padding: 10px;\n    color: white;\n    border: none;\n    transition: 0.5s;\n\n    ${({ toggleDone }) => toggleDone && css`\n        background-color: hsl(120, 100%, 25%);\n\n        &:hover{\n            background-color: hsl(120, 100%, 35%);\n            cursor: pointer;\n        }\n\n        &:active{\n            background-color: hsl(120, 100%, 45%);\n        }\n    `}\n\n    ${({ remove }) => remove && css`\n        background-color: hsl(0, 100%, 40%);\n\n        &:hover{\n            background-color: hsl(0, 100%, 50%);\n            cursor: pointer;\n        }\n\n        &:active{\n            background-color: hsl(0, 100%, 70%);\n        }\n    `}\n`;","import React from \"react\";\nimport { List, Item, Content, Button } from \"./styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\n\nconst TasksList = () => {\n\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {tasks.map(task => (\n\n        <Item\n          key={task.id}\n          hidden={task.done && hideDone}\n        >\n          <Button\n            toggleDone\n            onClick={() => dispatch(toggleTaskDone(task.id))}\n          >\n            {task.done ? \"✓\" : \"\"}\n          </Button>\n\n          <Content done={task.done}>\n            {task.content}\n          </Content>\n\n          <Button\n            remove\n            onClick={() => dispatch(removeTask(task.id))}\n          >\n            X\n        </Button>\n\n        </Item>\n      ))}\n    </List>\n  )\n};\n\nexport default TasksList;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.span`\n    display: flex;\n    align-content: center;\n    flex-wrap: wrap;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-content: center;\n    }\n`;","\nimport styled, { css } from \"styled-components\";\n\nexport const ControlButton = styled.button`\n    font-size: 15px;\n    color: ${({ theme }) => theme.colors.teal};\n    background: white;\n    border: none;\n    margin-left: 20px;\n    transition: 0.5s;\n    padding: 10px;\n\n    ${({ exampleTasks }) => exampleTasks && css`\n        text-align: right;\n    `}\n\n    &:hover {\n        cursor: pointer;\n        filter: brightness(110%);\n    }\n\n    &:active {\n        cursor: pointer;\n        filter: brightness(120%);\n    }\n\n    &:disabled {\n        cursor: pointer;\n        color: ${({ theme }) => theme.colors.lightGrey};\n    }\n`;","import React from \"react\";\nimport { Wrapper } from \"./styled\";\nimport { ControlButton } from \"../ControlButtons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\n\nconst Buttons = () => {\n\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    tasks.length > 0 && (\n      <Wrapper>\n        <ControlButton\n          onClick={() => dispatch(toggleHideDone())}\n          disabled={tasks.every(({ done }) => !done)}\n        >\n          {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n        </ControlButton>\n\n        <ControlButton\n          onClick={() => dispatch(setAllDone())}\n          disabled={tasks.every(({ done }) => done)}\n        >\n          Ukończ wszystkie\n        </ControlButton>\n      </Wrapper>\n    )\n  )\n};\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const Header = styled.h2`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 3px;\n    display: flex;\n`;\n\nexport const ButtonBox = styled.span`\n    flex-grow: 1;\n    text-align: right;\n`;","import React from \"react\";\nimport { ControlButton } from \"../ControlButtons\";\nimport { Header, ButtonBox } from \"./styled\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchExampleTasks } from \"../tasksSlice\";\n\nconst SectionAddTask = ({ title, body }) => {\n\n    const dispatch = useDispatch();\n\n    return (\n        <section>\n            <>\n                <Header>\n                    {title}\n                    <ButtonBox>\n                        <ControlButton exampleTasks onClick={() => dispatch(fetchExampleTasks())}>\n                            Pobierz przykładowe zadania\n                        </ControlButton>\n                    </ButtonBox>\n                </Header>\n            </>\n\n            {body}\n        </section>\n    )\n};\n\nexport default SectionAddTask;","import styled from \"styled-components\";\n\nexport const Header = styled.h2`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 3px;\n    display: grid;\n    grid-template-columns: 1fr auto;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        grid-template-columns: auto;\n    }\n`;\n\nexport const ListBox = styled.div`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n`;","import React from \"react\";\nimport { Header, ListBox } from \"./styled\";\n\nconst SectionDisplayTasks = ({ title, body, extraHeaderContent }) => (\n    <section>\n        <Header>\n            <span>{title}</span>\n            {extraHeaderContent}\n        </Header>\n\n        <ListBox>\n            {body}\n        </ListBox>\n    </section>\n);\n\nexport default SectionDisplayTasks;","import React from \"react\";\n\nconst Header = ({title}) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const FooterInfo = styled.footer`\n    text-align: center;\n    margin: 20px auto;\n    font-size: 14px;\n    color: ${({ theme }) => theme.colors.lightGrey};\n`;","import React from \"react\";\nimport { FooterInfo } from \"./styled\";\n\nconst Footer = ({ title }) => (\n    <FooterInfo>\n        {title}\n    </FooterInfo>\n);\n\nexport default Footer;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    max-width: 900px;\n    margin: 0 auto;\n    padding: 20px;\n`;","import React from \"react\";\nimport { Wrapper } from \"./styled\";\n\nconst Container = ({ children }) => (\n    <Wrapper>\n        {children}\n    </Wrapper>\n);\n\nexport default Container;","import React from \"react\";\nimport Form from \"./Form\";\nimport TasksList from \"./TasksList\";\nimport Buttons from \"./Buttons\";\nimport SectionAddTask from \"./SectionAddTask\";\nimport SectionDisplayTasks from \"./SectionDisplayTasks\";\nimport Header from \"../../common/Header\";\nimport Footer from \"../../common/Footer\";\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n\n  return (\n    <Container>\n\n      <Header title=\"Lista zadań\" />\n\n      <SectionAddTask\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n\n      <SectionDisplayTasks\n        title=\"Lista zadań\"\n        extraHeaderContent={<Buttons />}\n        body={<TasksList />}\n      />\n\n      <Footer title=\"© Michał Adamczyk 2020. Wszystkie prawa zastrzeżone!\" />\n\n    </Container>\n  );\n};\n\nexport default Tasks;","import React from \"react\";\nimport Tasks from \"./features/tasks/Tasks\";\n\nexport const App = () => <Tasks/>;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n    }\n\n    *, ::after, ::before {\n        box-sizing: inherit;\n    }\n\n    body {\n        font-family: 'Montserrat', sans-serif;\n        background-color: ${({ theme }) => theme.colors.concrete};\n        margin: 20px auto;\n        line-height: 1.4;\n        color: rgb(49, 49, 49);\n    }\n`;","export const getExampleTasks = async () => {\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\n\n    if (!response.ok) {\n\n        new Error(response.statusText);\n    }\n\n    return await response.json();\n};","// import {fetchExampleTasks} from \"./tasksSlice\";\nimport { takeLatest, call, put, takeEvery, select } from \"redux-saga/effects\";\nimport { getExampleTasks } from \"./getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\nconst { fetchExampleTasks, setTasks, selectTasks } = require(\"./tasksSlice\");\n\nfunction* fetchExampleTasksHandler() {\n    try {\n        const exampleTasks = yield call(getExampleTasks);\n        yield put(setTasks(exampleTasks));\n    } catch (error) {\n        yield call(alert, \"Coś poszło nie tak!\");\n    }\n}\n\nfunction* saveTasksInLocalStorageHandler() {\n    const tasks = yield select(selectTasks);\n    yield call(saveTasksInLocalStorage, tasks);\n}\n\nexport function* watchFetchExampleTasks() {\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n};","import { all } from \"redux-saga/effects\";\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\n\nexport default function* rootSaga() {\n\n    yield all([\n        watchFetchExampleTasks(),\n    ]);\n}","import { configureStore } from \"@reduxjs/toolkit\";\nimport taskReducer from \"./features/tasks/tasksSlice\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n    reducer: {\n        tasks: taskReducer,\n    },\n    middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from './theme';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","export const theme = {\n    colors: {\n        backgroundColor: \"white\",\n        teal: \"#008080\",\n        lightGrey: \"#ccc\",\n        concrete: \"#F2F2F2\",\n    },\n\n    breakpoints: {\n        mobile: 767,\n    }\n};","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\n\nconst tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        tasks: getTasksFromLocalStorage,\n        hideDone: false,\n    },\n\n    reducers: {\n        addTask: ({ tasks }, { payload }) => {\n            tasks.push(payload);\n        },\n\n        toggleHideDone: state => {\n            state.hideDone = !state.hideDone;\n        },\n\n        toggleTaskDone: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(({ id }) => id === payload);\n            tasks[index].done = !tasks[index].done;\n        },\n\n        setAllDone: (state) => {\n            state.tasks.map(task => task.done = true);\n        },\n\n        removeTask: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(({ id }) => id === payload);\n            tasks.splice(index, 1);\n        },\n\n        fetchExampleTasks: () => { },\n\n        setTasks: (state, { payload: tasks }) => {\n            state.tasks = tasks;\n        }\n    },\n});\n\nexport const {\n    addTask,\n    toggleHideDone,\n    toggleTaskDone,\n    setAllDone,\n    removeTask,\n    fetchExampleTasks,\n    setTasks,\n} = tasksSlice.actions;\n\nexport const selectTasks = state => state.tasks;\nexport default tasksSlice.reducer;"],"sourceRoot":""}