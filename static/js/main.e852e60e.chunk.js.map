{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/ControlButtons.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/SectionAddTask/styled.js","features/tasks/TasksPage/SectionAddTask/index.js","features/tasks/TasksPage/SectionDisplayTasks/styled.js","features/tasks/TasksPage/SectionDisplayTasks/index.js","common/Header/index.js","common/Footer/styled.js","common/Footer/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/index.js","features/tasks/SingleTaskPage/index.js","features/author/AuthorPage.js","styledNavLink.js","styledNavigation.js","App.js","serviceWorker.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js","features/tasks/tasksSlice.js"],"names":["saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","getTasksFromLocalStorage","parse","getItem","StyledForm","styled","form","theme","colors","backgroundColor","breakpoints","mobile","Input","input","concrete","Button","button","teal","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","addTask","content","done","id","nanoid","current","focus","ref","value","type","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","lightGrey","toggleDone","remove","StyledNavLink","NavLink","TasksList","location","useLocation","query","URLSearchParams","search","get","useSelector","state","selectTasksByQuery","hideDone","selectHideDone","map","task","key","onClick","toggleTaskDone","to","removeTask","Wrapper","ControlButton","exampleTasks","Buttons","selectTasks","everyTaskDone","selectIsEveryTaskDone","isTaskListEmpty","selectIsTaskListEmpty","toggleHideDone","disabled","every","setAllDone","Header","h2","ButtonBox","SectionAddTask","title","body","loading","selectLoading","fetchExampleTasks","ListBox","div","param","SectionDisplayTasks","extraHeaderContent","FooterInfo","footer","Footer","Container","children","Search","useQueryParameters","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","push","pathname","useReplaceQueryParameter","TasksPage","SingleTaskPage","useParams","getTaskById","attrs","activeClassName","StyledNavigation","StyledItem","path","AuthorPage","Boolean","window","hostname","match","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExampleTasks","require","fetchExampleTasksSuccess","fetchExampleTasksError","delay","call","put","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksData","taskReducer","middleware","run","ReactDOM","render","StrictMode","tealDark","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","tasksSlice","createSlice","name","initialState","reducers","payload","taskId","index","findIndex","splice","actions","selectTasksState","length","find","filter","toUpperCase","includes"],"mappings":"yHAAA,wEAEaA,EAA0B,SAACC,GACpCC,aAAaC,QAHO,QAGkBC,KAAKC,UAAUJ,KAG5CK,EAA2B,kBACpCF,KAAKG,MAAML,aAAaM,QAPJ,WAOiC,K,wgCCLlD,IAAMC,EAAaC,IAAOC,KAAV,KACC,qBAAGC,MAAkBC,OAAOC,mBAO3B,qBAAGF,MAAkBG,YAAYC,UAK7CC,EAAQP,IAAOQ,MAAV,KAEM,qBAAGN,MAAkBC,OAAOM,YAGvCC,EAASV,IAAOW,OAAV,KAEK,qBAAGT,MAAkBC,OAAOS,QAehC,qBAAGV,MAAkBG,YAAYC,U,sBCQtCO,EAvCF,WAAO,IAAD,EAE6BC,mBAAS,IAFtC,mBAERC,EAFQ,KAEQC,EAFR,KAGTC,EAAWC,iBAAO,MAElBC,EAAWC,cAoBjB,OACI,kBAACrB,EAAD,CAAYsB,SAnBK,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAAwBT,EAAeU,OAExCD,IAILL,EAASO,kBAAQ,CACbC,QAASH,EACTI,MAAM,EACNC,GAAIC,iBAGRd,EAAkB,IAClBC,EAASc,QAAQC,WAKb,kBAACzB,EAAD,CACI0B,IAAKhB,EACLiB,MAAOnB,EACPoB,KAAK,OACLC,YAAY,wBACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBtB,EAAkBsB,EAAOJ,UAEvD,kBAACxB,EAAD,yB,wgECrCL,IAAM6B,EAAOvC,IAAOwC,GAAV,KAQJC,EAAOzC,IAAO0C,GAAV,KAEc,qBAAGxC,MAAkBC,OAAOM,YAMrD,qBAAGkC,QAAuBC,YAAJ,QAKfC,EAAU7C,IAAO8C,KAAV,KAId,qBAAGlB,MAAmBgB,YAAJ,KAEP,qBAAG1C,MAAkBC,OAAO4C,gBAIhCrC,EAASV,IAAOW,OAAV,KASb,qBAAGqC,YAA+BJ,YAAJ,QAa9B,qBAAGK,QAAuBL,YAAJ,QAcfM,EAAgBlD,YAAOmD,IAAPnD,CAAH,KAGb,qBAAGE,MAAkBC,OAAOS,QAUnC,qBAAGgB,MAAmBgB,YAAJ,KAEP,qBAAG1C,MAAkBC,OAAO4C,gBCnC9BK,EA3CG,WAEhB,IAAMC,EAAWC,cAEXC,EADe,IAAIC,gBAAgBH,EAASI,QACvBC,ICXd,UDaPnE,EAAQoE,aAAY,SAAAC,GAAK,OAAIC,6BAAmBD,EAAOL,MACvDO,EAAWH,YAAYI,kBACvB5C,EAAWC,cAGjB,OACE,kBAACmB,EAAD,KACGhD,EAAMyE,KAAI,SAAAC,GAAI,OAEb,kBAACxB,EAAD,CACEyB,IAAKD,EAAKpC,GACVc,OAAQsB,EAAKrC,MAAQkC,GAErB,kBAAC,EAAD,CACEd,YAAU,EACVmB,QAAS,kBAAMhD,EAASiD,yBAAeH,EAAKpC,OAE3CoC,EAAKrC,KAAO,SAAM,IAGrB,kBAACiB,EAAD,CAASjB,KAAMqC,EAAKrC,KAAO,EAAI,GAC7B,kBAACsB,EAAD,CAAetB,KAAMqC,EAAKrC,KAAO,EAAI,EAAGyC,GAAE,mBAAcJ,EAAKpC,KAAOoC,EAAKtC,UAG3E,kBAAC,EAAD,CACEsB,QAAM,EACNkB,QAAS,kBAAMhD,EAASmD,qBAAWL,EAAKpC,OAF1C,W,kTEnCH,IAAM0C,EAAUvE,IAAO8C,KAAV,KAKK,qBAAG5C,MAAkBG,YAAYC,U,6eCJnD,IAAMkE,EAAgBxE,IAAOW,OAAV,KAEb,qBAAGT,MAAkBC,OAAOS,QAOnC,qBAAG6D,cAAmC7B,YAAJ,QAavB,qBAAG1C,MAAkBC,OAAO4C,aCiB9B2B,EA7BC,WAEd,IAAMnF,EAAQoE,YAAYgB,eACpBb,EAAWH,YAAYI,kBACvBa,EAAgBjB,YAAYkB,yBAC5BC,EAAkBnB,YAAYoB,yBAC9B5D,EAAWC,cAEjB,OACG0D,EAAkB,GACjB,kBAACP,EAAD,KACE,kBAACC,EAAD,CACEL,QAAS,kBAAMhD,EAAS6D,6BACxBC,SAAU1F,EAAM2F,OAAM,qBAAGtD,SAExBkC,EAAW,aAAU,QAJxB,mBAOA,kBAACU,EAAD,CACEL,QAAS,kBAAMhD,EAASgE,yBACxBF,SAAUL,GAFZ,2B,sRC7BD,IAAMQ,EAASpF,IAAOqF,GAAV,KACK,qBAAGnF,MAAkBC,OAAOC,mBAMvCkF,EAAYtF,IAAO8C,KAAV,KCoBPyC,EAvBQ,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAEvBtE,EAAWC,cACXsE,EAAU/B,YAAYgC,iBAE5B,OACI,iCACI,oCACI,kBAAC,EAAD,KACKH,EACD,kBAACF,EAAD,KACI,kBAACd,EAAD,CAAeS,SAAUS,EAASjB,cAAY,EAACN,QAAS,kBAAMhD,EAASyE,iCAClEF,EAAU,aAAe,uCAMzCD,I,8jBCtBN,IAAML,EAASpF,IAAOqF,GAAV,KACK,qBAAGnF,MAAkBC,OAAOC,mBAO3B,qBAAGF,MAAkBG,YAAYC,UAK7CuF,EAAU7F,IAAO8F,IAAV,KACI,qBAAG5F,MAAkBC,OAAOC,mBAG9C,kBAAyB,WAAzB,EAAG2F,OAAkCnD,YAAtB,QCHNoD,GAba,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMQ,EAAhB,EAAgBA,mBAAoBF,EAApC,EAAoCA,MAApC,OACxB,iCACI,kBAAC,EAAD,KACI,8BAAOP,GACNS,GAGL,kBAACJ,EAAD,CAASE,MAAOA,GACXN,KCHEL,GANA,SAAC,GAAD,IAAEI,EAAF,EAAEA,MAAF,OACX,gCACI,4BAAKA,K,iKCFN,IAAMU,GAAalG,IAAOmG,OAAV,MAIV,qBAAGjG,MAAkBC,OAAO4C,aCG1BqD,GANA,SAAC,GAAD,IAAGZ,EAAH,EAAGA,MAAH,OACX,kBAACU,GAAD,KACKV,I,yICHF,IAAMjB,GAAUvE,IAAO8F,IAAV,MCOLO,GANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,kBAAC,GAAD,KACKA,I,2jBCHF,IAAMlB,GAASpF,IAAOqF,GAAV,MACK,qBAAGnF,MAAkBC,OAAOC,mBAMvCL,GAAaC,IAAOC,KAAV,MACC,qBAAGC,MAAkBC,OAAOC,mBAM3B,qBAAGF,MAAkBG,YAAYC,UAK7CC,GAAQP,IAAOQ,MAAV,MAEM,qBAAGN,MAAkBC,OAAOM,YCUrC8F,GA5BA,SAAC,GAA4B,IAA1Bf,EAAyB,EAAzBA,MAAOpD,EAAkB,EAAlBA,YAEfmB,ECLwB,SAACW,GAC/B,IAAMb,EAAWC,cAEjB,OADqB,IAAIE,gBAAgBH,EAASI,QAC9BC,IAAIQ,GDEVsC,CdPH,UcQLC,ECC8B,WAEpC,IAAMpD,EAAWC,cACXoD,EAAUC,cAEhB,OAAO,YAAqB,IAAlBzC,EAAiB,EAAjBA,IAAKhC,EAAY,EAAZA,MAEL0E,EAAe,IAAIpD,gBAAgBH,EAASI,aAEpCoD,IAAV3E,EACA0E,EAAaE,OAAO5C,GAEpB0C,EAAaG,IAAI7C,EAAKhC,GAG1B,IAAM8E,EAAYJ,EAAaK,WAC/BP,EAAQQ,KAAR,UAAgB7D,EAAS8D,SAAzB,YAAqCH,KDjBXI,GAS9B,OACI,iCACI,kBAAC,GAAD,KACK5B,GAEL,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIpD,YAAaA,EACbF,MAAOqB,GAAS,GAChBlB,SAhBM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBmE,EAAsB,CAClBvC,IdZG,ScaHhC,MAA+B,KAAxBI,EAAOJ,MAAMT,OAAgBa,EAAOJ,WAAQ2E,UE2BhDQ,OA7Bf,WAEE,OACE,kBAAC,GAAD,KAEE,kBAAC,GAAD,CAAQ7B,MAAM,qBAEd,kBAAC,EAAD,CACEA,MAAM,qBACNC,KAAM,kBAAC,EAAD,QAGR,kBAAC,GAAD,CACED,MAAM,0BACNpD,YAAY,oBAGd,kBAAC,GAAD,CACEoD,MAAM,mBACNS,mBAAoB,kBAAC,EAAD,MACpBR,KAAM,kBAAC,EAAD,QAGR,kBAAC,GAAD,CAAQD,MAAM,wECAL8B,OAzBf,WAA2B,IAEfzF,EAAO0F,cAAP1F,GACFoC,EAAON,aAAY,SAAAC,GAAK,OAAI4D,sBAAY5D,EAAO/B,MAErD,OACI,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAQ2D,MAAM,8BAEd,kBAAC,GAAD,CACIA,MAAOvB,EAAOA,EAAKtC,QAAU,sCAC7B8D,OAAQxB,GACJ,oCACI,mDADJ,IACiCA,EAAKrC,KAAO,MAAQ,SAK7D,kBAAC,GAAD,CAAQ4D,MAAM,wECrBX,qBAEX,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAQA,MAAM,cAEd,kBAAC,GAAD,CACIO,MAAM,SACNP,MAAM,uBACNC,KACI,oCACI,2BAAG,iDACH,+EAA0C,8CAA1C,iCAAgF,6BAAhF,6IAIA,kCAAO,mGAAP,iUAOA,sOACkC,wFAM9C,kBAAC,GAAD,CAAQD,MAAM,wE,qRClCtB,IAEatC,GAAgBlD,YAAOmD,KAASsE,OAAM,iBAAO,CACtDC,gBAHoB,YAEK1H,CAAH,KAFF,U,qaCDjB,IAAM2H,GAAmB3H,IAAOwC,GAAV,MAOX,qBAAGtC,MAAkBC,OAAOS,QAKjCgH,GAAa5H,IAAO0C,GAAV,MCNR,qBACb,kBAAC,IAAD,KACE,6BACE,kBAACiF,GAAD,KACE,kBAACC,GAAD,KACE,kBAAC,GAAD,CAAevD,GAAG,YAAlB,YAEF,kBAACuD,GAAD,KACE,kBAAC,GAAD,CAAevD,GAAG,UAAlB,eAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwD,KAAK,gBACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAACC,GAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,KACV,kBAAC,IAAD,CAAUxD,GAAG,kBClBH0D,QACW,cAA7BC,OAAO3E,SAAS4E,UAEe,UAA7BD,OAAO3E,SAAS4E,UAEhBD,OAAO3E,SAAS4E,SAASC,MACvB,2D,iYChBC,IAAMC,GAAcC,YAAH,MAWI,qBAAGlI,MAAkBC,OAAOM,Y,+CCb3C4H,GAAe,yCAAG,6BAAAC,EAAA,sEACJC,MAAM,sCADF,cACrBC,EADqB,QAGbC,IAEV,IAAIC,MAAMF,EAASG,YALI,SAQdH,EAASI,OARK,mFAAH,qD,sBCMlBC,I,aAWAC,I,aAKOC,I,GAlB4EC,EAAQ,GAA7FpD,G,GAAAA,kBAAmBqD,G,GAAAA,yBAA0BtE,G,GAAAA,YAAauE,G,GAAAA,uBAElE,SAAUL,KAAV,wEAEQ,OAFR,kBAEcM,aAAM,KAFpB,OAG6B,OAH7B,SAGmCC,aAAKf,IAHxC,OAIQ,OADM5D,EAHd,gBAIc4E,aAAIJ,GAAyBxE,IAJ3C,+BAMQ,OANR,oCAMc4E,aAAIH,MANlB,QAOQ,OAPR,UAOcE,aAAKE,MAAO,+CAP1B,uDAWA,SAAUR,KAAV,wEACkB,OADlB,SACwBS,aAAO5E,IAD/B,OAEI,OADMpF,EADV,gBAEU6J,aAAK9J,KAAyBC,GAFxC,wCAKO,SAAUwJ,KAAV,kEACH,OADG,SACGS,aAAW5D,GAAkBzD,KAAM0G,IADtC,OAEH,OAFG,SAEGY,aAAU,IAAKX,IAFlB,wC,iBCnBkBY,IAAV,SAAUA,KAAV,kEAEX,OAFW,SAELC,aAAI,CACNZ,OAHO,wCCEf,IAAMa,GAAiBC,eAEjBC,GAAQC,YAAe,CACzBC,QAAS,CACLC,UAAWC,WAEfC,WAAY,CAACP,MAGjBA,GAAeQ,IAAIV,IAEJI,UCNfO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUT,MAAOA,IACf,kBAAC,IAAD,CAAe5J,MCbA,CACjBC,OAAQ,CACJC,gBAAiB,QACjBQ,KAAM,UACN4J,SAAU,UACVzH,UAAW,OACXtC,SAAU,WAGdJ,YAAa,CACTC,OAAQ,ODIR,kBAAC6H,GAAD,MACA,kBAACsC,GAAD,SAINC,SAASC,eAAe,SNgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,oxBQtItBC,EAAaC,YAAY,CAC3BC,KAAM,YACNC,aAAc,CACVlM,MAAOK,cACPkE,UAAU,EACV4B,SAAS,GAGbgG,SAAU,CACNhK,QAAS,cAAmC,IAAhCnC,EAA+B,EAA/BA,MAAoB0E,EAAW,EAApB0H,QACnBpM,EAAM2H,KAAKjD,IAGfe,eAAgB,SAAApB,GACZA,EAAME,UAAYF,EAAME,UAG5BM,eAAgB,cAAqC,IAAlC7E,EAAiC,EAAjCA,MAAoBqM,EAAa,EAAtBD,QACpBE,EAAQtM,EAAMuM,WAAU,qBAAGjK,KAAgB+J,KACjDrM,EAAMsM,GAAOjK,MAAQrC,EAAMsM,GAAOjK,MAGtCuD,WAAY,YAAgB,IAAD,EAAZ5F,EAAY,EAAZA,MAAY,cACJA,GADI,IACvB,2BAA0B,SACjBqC,MAAO,GAFO,gCAM3B0C,WAAY,cAAqC,IAAlC/E,EAAiC,EAAjCA,MAAoBqM,EAAa,EAAtBD,QAChBE,EAAQtM,EAAMuM,WAAU,qBAAGjK,KAAgB+J,KACjDrM,EAAMwM,OAAOF,EAAO,IAGxBjG,kBAAmB,SAAAhC,GACfA,EAAM8B,SAAU,GAGpBuD,yBAA0B,SAACrF,EAAD,GAAgC,IAAbrE,EAAY,EAArBoM,QAChC/H,EAAMrE,MAAQA,EACdqE,EAAM8B,SAAU,GAGpBwD,uBAAwB,SAAAtF,GACpBA,EAAM8B,SAAU,M,EAcxB4F,EAAWU,QARXtK,E,EAAAA,QACAsD,E,EAAAA,eACAZ,E,EAAAA,eACAe,E,EAAAA,WACAb,E,EAAAA,WACAsB,E,EAAAA,kBACAqD,E,EAAAA,yBACAC,E,EAAAA,uBAGE+C,EAAmB,SAAArI,GAAK,OAAIA,EAAMqG,WAE3BtF,EAAc,SAAAf,GAAK,OAAIqI,EAAiBrI,GAAOrE,OAC/CwE,EAAiB,SAAAH,GAAK,OAAIqI,EAAiBrI,GAAOE,UAClD6B,EAAgB,SAAA/B,GAAK,OAAIqI,EAAiBrI,GAAO8B,SACjDX,EAAwB,SAAAnB,GAAK,OAAkC,IAA9Be,EAAYf,GAAOsI,QACpDrH,EAAwB,SAAAjB,GAAK,OAAIe,EAAYf,GAAOsB,OAAM,qBAAGtD,SAE7D4F,EAAc,SAAC5D,EAAOgI,GAAR,OACvBjH,EAAYf,GAAOuI,MAAK,qBAAGtK,KAAgB+J,MAElC/H,EAAqB,SAACD,EAAOL,GACtC,IAAMhE,EAAQoF,EAAYf,GAE1B,OAAKL,GAAwB,KAAfA,EAAM9B,KAIblC,EAAM6M,QAAO,qBAAGzK,QACX0K,cAAcC,SAAS/I,EAAM9B,OAAO4K,kBAJrC9M,GAQA+L,YAAf,U","file":"static/js/main.e852e60e.chunk.js","sourcesContent":["const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = (tasks) => {\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n}\n\nexport const getTasksFromLocalStorage = () =>\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 10px;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 2px solid ${({ theme }) => theme.colors.concrete};\n`;\n\nexport const Button = styled.button`\n    padding: 10px;\n    background-color: ${({ theme }) => theme.colors.teal};\n    border: none;\n    color: white;\n    transition: 0.5s;\n\n    &:hover {\n        filter: brightness(110%);\n        transform: scale(1.1);\n        cursor: pointer;\n    }\n\n    &:active {\n        filter: brightness(120%);\n    }\n\n@media(max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        &:hover {\n            transform: scaleY(1.1);\n        }\n    }\n`;","import React, { useState, useRef } from \"react\";\nimport { StyledForm, Input, Button } from \"./styled\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"../../tasksSlice\";\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nconst Form = () => {\n\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const dispatch = useDispatch();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimmedNewTaskContent = newTaskContent.trim();\n\n        if (!trimmedNewTaskContent) {\n            return;\n        }\n\n        dispatch(addTask({\n            content: trimmedNewTaskContent,\n            done: false,\n            id: nanoid(),\n        }));\n\n        setNewTaskContent(\"\");\n        inputRef.current.focus();\n    };\n\n    return (\n        <StyledForm onSubmit={onFormSubmit}>\n            <Input\n                ref={inputRef}\n                value={newTaskContent}\n                type=\"text\"\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <Button>Dodaj zadanie!</Button>\n        </StyledForm>\n    )\n};\n\nexport default Form;","import { NavLink } from \"react-router-dom\";\nimport styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    background-color: white;\n    padding: 0px;\n    margin: 0px;\n    display: grid;\n    list-style: none;\n`;\n\nexport const Item = styled.li`\n    padding: 10px;\n    border-bottom: 2px solid ${({ theme }) => theme.colors.concrete};\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 20px;\n    align-items: center;\n\n    ${({ hidden }) => hidden && css`\n        display: none;\n    `}\n`;\n\nexport const Content = styled.span`\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n        color: ${({ theme }) => theme.colors.lightGrey};\n    `}\n`;\n\nexport const Button = styled.button`\n    text-decoration: none;\n    min-width: 40px;\n    min-height: 40px;\n    padding: 10px;\n    color: white;\n    border: none;\n    transition: 0.5s;\n\n    ${({ toggleDone }) => toggleDone && css`\n        background-color: hsl(120, 100%, 25%);\n\n        &:hover{\n            background-color: hsl(120, 100%, 35%);\n            cursor: pointer;\n        }\n\n        &:active{\n            background-color: hsl(120, 100%, 45%);\n        }\n    `}\n\n    ${({ remove }) => remove && css`\n        background-color: hsl(0, 100%, 40%);\n\n        &:hover{\n            background-color: hsl(0, 100%, 50%);\n            cursor: pointer;\n        }\n\n        &:active{\n            background-color: hsl(0, 100%, 70%);\n        }\n    `}\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n\n    text-decoration: none;\n    color: ${({ theme }) => theme.colors.teal};\n\n    &:hover {\n        font-weight: bold;\n    }\n\n    &:active {\n        filter: brightness(120%);\n    }\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n        color: ${({ theme }) => theme.colors.lightGrey};\n    `}\n`;","import React from \"react\";\nimport { List, Item, Content, Button, StyledNavLink } from \"./styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\nimport { useLocation } from \"react-router-dom\";\nimport searchQueryParamName from \"../searchQueryParamName\";\n\nconst TasksList = () => {\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get(searchQueryParamName);\n\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\n  const hideDone = useSelector(selectHideDone);\n  const dispatch = useDispatch();\n\n\n  return (\n    <List>\n      {tasks.map(task => (\n\n        <Item\n          key={task.id}\n          hidden={task.done && hideDone}\n        >\n          <Button\n            toggleDone\n            onClick={() => dispatch(toggleTaskDone(task.id))}\n          >\n            {task.done ? \"✓\" : \"\"}\n          </Button>\n\n          <Content done={task.done ? 1 : 0}>\n            <StyledNavLink done={task.done ? 1 : 0} to={`/zadania/${task.id}`}>{task.content}</StyledNavLink>\n          </Content>\n\n          <Button\n            remove\n            onClick={() => dispatch(removeTask(task.id))}\n          >\n            X\n        </Button>\n\n        </Item>\n      ))}\n    </List>\n  )\n};\n\nexport default TasksList;","export default \"szukaj\";\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.span`\n    display: flex;\n    align-content: center;\n    flex-wrap: wrap;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-content: center;\n    }\n`;","\nimport styled, { css } from \"styled-components\";\n\nexport const ControlButton = styled.button`\n    font-size: 15px;\n    color: ${({ theme }) => theme.colors.teal};\n    background: white;\n    border: none;\n    margin-left: 20px;\n    padding: 10px;\n    cursor: pointer;\n\n    ${({ exampleTasks }) => exampleTasks && css`\n        text-align: right;\n    `}\n\n    &:hover {\n        font-weight: bold;\n    }\n\n    &:active {\n        filter: brightness(120%);\n    }\n\n    &:disabled {\n        color: ${({ theme }) => theme.colors.lightGrey};\n    }\n`;","import React from \"react\";\nimport { Wrapper } from \"./styled\";\nimport { ControlButton } from \"../../ControlButtons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectTasks,\n  toggleHideDone,\n  setAllDone,\n  selectHideDone,\n  selectIsEveryTaskDone,\n  selectIsTaskListEmpty\n} from \"../../tasksSlice\";\n\nconst Buttons = () => {\n\n  const tasks = useSelector(selectTasks);\n  const hideDone = useSelector(selectHideDone);\n  const everyTaskDone = useSelector(selectIsEveryTaskDone);\n  const isTaskListEmpty = useSelector(selectIsTaskListEmpty);\n  const dispatch = useDispatch();\n\n  return (\n    !isTaskListEmpty > 0 && (\n      <Wrapper>\n        <ControlButton\n          onClick={() => dispatch(toggleHideDone())}\n          disabled={tasks.every(({ done }) => !done)}\n        >\n          {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n        </ControlButton>\n\n        <ControlButton\n          onClick={() => dispatch(setAllDone())}\n          disabled={everyTaskDone}\n        >\n          Ukończ wszystkie\n        </ControlButton>\n      </Wrapper>\n    )\n  )\n};\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const Header = styled.h2`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 3px;\n    display: flex;\n`;\n\nexport const ButtonBox = styled.span`\n    flex-grow: 1;\n    text-align: right;\n`;","import React from \"react\";\nimport { ControlButton } from \"../../ControlButtons\";\nimport { Header, ButtonBox } from \"./styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\n\nconst SectionAddTask = ({ title, body }) => {\n\n    const dispatch = useDispatch();\n    const loading = useSelector(selectLoading);\n\n    return (\n        <section>\n            <>\n                <Header>\n                    {title}\n                    <ButtonBox>\n                        <ControlButton disabled={loading} exampleTasks onClick={() => dispatch(fetchExampleTasks())}>\n                            {loading ? \"Loading...\" : \"Pobierz przykładowe zadania\"}\n                        </ControlButton>\n                    </ButtonBox>\n                </Header>\n            </>\n\n            {body}\n        </section>\n    )\n};\n\nexport default SectionAddTask;","import styled, { css } from \"styled-components\";\n\nexport const Header = styled.h2`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 3px;\n    display: grid;\n    word-break: break-all;\n    grid-template-columns: 1fr auto;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        grid-template-columns: auto;\n    }\n`;\n\nexport const ListBox = styled.div`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n\n    ${({ param }) => param === \"author\" && css`\n        text-align: justify;\n        padding: 20px 30px;\n    `}\n`;","import React from \"react\";\nimport { Header, ListBox } from \"./styled\";\n\nconst SectionDisplayTasks = ({ title, body, extraHeaderContent, param }) => (\n    <section>\n        <Header>\n            <span>{title}</span>\n            {extraHeaderContent}\n        </Header>\n\n        <ListBox param={param}>\n            {body}\n        </ListBox>\n    </section>\n);\n\nexport default SectionDisplayTasks;","import React from \"react\";\n\nconst Header = ({title}) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const FooterInfo = styled.footer`\n    text-align: center;\n    margin: 20px auto;\n    font-size: 14px;\n    color: ${({ theme }) => theme.colors.lightGrey};\n`;","import React from \"react\";\nimport { FooterInfo } from \"./styled\";\n\nconst Footer = ({ title }) => (\n    <FooterInfo>\n        {title}\n    </FooterInfo>\n);\n\nexport default Footer;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    max-width: 900px;\n    margin: 0 auto;\n    padding: 20px;\n`;","import React from \"react\";\nimport { Wrapper } from \"./styled\";\n\nconst Container = ({ children }) => (\n    <Wrapper>\n        {children}\n    </Wrapper>\n);\n\nexport default Container;","import styled from \"styled-components\";\n\nexport const Header = styled.h2`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 3px;\n    display: flex;\n`;\n\nexport const StyledForm = styled.form`\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    padding: 20px;\n    margin-bottom: 10px;\n    display: grid;\n    grid-template-columns: 1fr auto;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 2px solid ${({ theme }) => theme.colors.concrete};\n`;","import React from \"react\";\nimport { useQueryParameters, useReplaceQueryParameter } from \"../queryParameters\";\nimport searchQueryParamName from \"../searchQueryParamName\";\nimport { Header, StyledForm, Input } from \"./styled\";\n\nconst Search = ({ title, placeholder }) => {\n\n    const query = useQueryParameters(searchQueryParamName);\n    const replaceQueryParameter = useReplaceQueryParameter();\n\n    const onInputChange = ({ target }) => {\n        replaceQueryParameter({\n            key: searchQueryParamName,\n            value: target.value.trim() !== \"\" ? target.value : undefined,\n        });\n    };\n\n    return (\n        <section>\n            <Header>\n                {title}\n            </Header>\n            <StyledForm>\n                <Input\n                    placeholder={placeholder}\n                    value={query || \"\"}\n                    onChange={onInputChange}\n                />\n            </StyledForm>\n        </section>\n    )\n};\n\nexport default Search;","import { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useQueryParameters = (key) => {\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search);\n    return searchParams.get(key);\n};\n\n\nexport const useReplaceQueryParameter = () => {\n\n    const location = useLocation();\n    const history = useHistory();\n\n    return ({ key, value }) => {\n\n        const searchParams = new URLSearchParams(location.search);\n\n        if (value === undefined) {\n            searchParams.delete(key);\n        } else {\n            searchParams.set(key, value)\n        }\n\n        const newSearch = searchParams.toString();\n        history.push(`${location.pathname}?${newSearch}`);\n    }\n};","import React from \"react\";\nimport Form from \"./Form\";\nimport TasksList from \"./TasksList\";\nimport Buttons from \"./Buttons\";\nimport SectionAddTask from \"./SectionAddTask\";\nimport SectionDisplayTasks from \"./SectionDisplayTasks\";\nimport Header from \"../../../common/Header\";\nimport Footer from \"../../../common/Footer\";\nimport Container from \"../../../common/Container\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n\n  return (\n    <Container>\n\n      <Header title=\"Lista zadań\" />\n\n      <SectionAddTask\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n\n      <Search\n        title=\"Wyszukiwarka zadań\"\n        placeholder=\"Filtruj zadania\"\n      />\n\n      <SectionDisplayTasks\n        title=\"Lista zadań\"\n        extraHeaderContent={<Buttons />}\n        body={<TasksList />}\n      />\n\n      <Footer title=\"© Michał Adamczyk 2020. Wszystkie prawa zastrzeżone!\" />\n\n    </Container>\n  );\n};\n\nexport default TasksPage;","import React from \"react\";\nimport Header from \"../../../common/Header\";\nimport Footer from \"../../../common/Footer\";\nimport Container from \"../../../common/Container\";\nimport SectionDisplayTasks from \"../TasksPage/SectionDisplayTasks\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getTaskById } from \"../tasksSlice\";\n\nfunction SingleTaskPage() {\n\n    const { id } = useParams();\n    const task = useSelector(state => getTaskById(state, id));\n\n    return (\n        <Container>\n\n            <Header title=\"Szczegóły zadania\" />\n\n            <SectionDisplayTasks\n                title={task ? task.content : \"Nie znaleziono zadania 😢\"}\n                body={!!task && (\n                    <>\n                        <strong>Ukończono:</strong> {task.done ? \"TAK\" : \"NIE\"}\n                    </>\n                )}\n            />\n\n            <Footer title=\"© Michał Adamczyk 2020. Wszystkie prawa zastrzeżone!\" />\n\n        </Container>\n    );\n};\n\nexport default SingleTaskPage;","import React from \"react\";\nimport Container from \"../../common/Container\";\nimport Footer from \"../../common/Footer\";\nimport Header from \"../../common/Header\";\nimport SectionDisplayTasks from \"../tasks/TasksPage/SectionDisplayTasks\";\n\n\nexport default () => (\n\n    <Container>\n\n        <Header title=\"O autorze\" />\n\n        <SectionDisplayTasks\n            param=\"author\"\n            title=\"Michał Adamczyk\"\n            body={\n                <>\n                    <p><em>Cześć!</em></p>\n                    <p>Nazywam się Michał i bardzo serdecznie <em>Witam Cię</em> na mojej stronie 😃<br />\n                    Jestem ciekawym świata i żądnym nowych wyzwań mężem i ojcem dwóch wspaniałych synów 😊\n                    </p>\n\n                    <p>Mam <strong>7-miesięczne komercyjne doświadczenie w programowaniu</strong> Java oraz JavaScript\n                    (głównie lambdy na AWS). Wielka satysfakcja płynąca z kreowania nowych funkcjonalności przy pomocy kodu oraz\n                    konieczność\n                    nieustającego rozwoju to niewątpliwe zalety branży IT, która każdego dnia wciąga mnie coraz\n                    bardziej 🤩\n                    </p>\n\n                    <p>Wieloletnie doświadczenie w projektowaniu odzieży, nadruków i akcesoriów spowodowało, że moje pierwotne zainteresowanie\n                    backendem przesunęło się w stronę <strong>JS, React.js i innych technologii frontendowych.</strong>\n                    </p>\n                </>\n            }\n        />\n\n        <Footer title=\"© Michał Adamczyk 2020. Wszystkie prawa zastrzeżone!\" />\n\n    </Container>\n);","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst activeClassName = \"active\";\n\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\n    activeClassName,\n}))`\n    text-decoration: none;\n    color: white;\n    font-size: 1.1em;\n    padding: 5px;\n\n    &:hover {\n        border-bottom: solid 2px white;\n    }\n\n    &.${activeClassName} {\n        font-weight: bold;\n    }\n`;","import styled from \"styled-components\";\n\nexport const StyledNavigation = styled.ul`\n    display: flex;\n    justify-content: center;\n    list-style-type: none;\n    padding: 5px;\n    margin: 0;\n    margin-bottom: -10px;\n    background: ${({ theme }) => theme.colors.teal};\n    text-decoration :none;\n    color: white;\n`;\n\nexport const StyledItem = styled.li`\n    color: white;\n    margin: 15px;\n    text-decoration: none;\n`;","import React from \"react\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport TasksPage from \"./features/tasks/TasksPage/index\";\nimport SingleTaskPage from \"./features/tasks/SingleTaskPage/index\";\nimport AuthorPage from \"./features/author/AuthorPage\";\nimport { StyledNavLink } from \"./styledNavLink\";\nimport { StyledNavigation, StyledItem } from \"./styledNavigation\";\n\nexport default () => (\n  <HashRouter>\n    <nav>\n      <StyledNavigation>\n        <StyledItem>\n          <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\n        </StyledItem>\n        <StyledItem>\n          <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\n        </StyledItem>\n      </StyledNavigation>\n      <Switch>\n        <Route path=\"/zadania/:id\">\n          <SingleTaskPage />\n        </Route>\n        <Route path=\"/zadania\">\n          <TasksPage />\n        </Route>\n        <Route path=\"/autor\">\n          <AuthorPage />\n        </Route>\n        <Route path=\"/\">\n          <Redirect to=\"/zadania\" />\n        </Route>\n      </Switch>\n    </nav>\n  </HashRouter>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n    }\n\n    *, ::after, ::before {\n        box-sizing: inherit;\n    }\n\n    body {\n        font-family: 'Montserrat', sans-serif;\n        background-color: ${({ theme }) => theme.colors.concrete};\n        margin: 0px auto 20px;\n        line-height: 1.4;\n        color: rgb(49, 49, 49);\n    }\n`;","export const getExampleTasks = async () => {\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\n\n    if (!response.ok) {\n\n        new Error(response.statusText);\n    }\n\n    return await response.json();\n};","// import {fetchExampleTasks} from \"./tasksSlice\";\nimport { takeLatest, call, put, takeEvery, select, delay } from \"redux-saga/effects\";\nimport { getExampleTasks } from \"./getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\nconst { fetchExampleTasks, fetchExampleTasksSuccess, selectTasks, fetchExampleTasksError } = require(\"./tasksSlice\");\n\nfunction* fetchExampleTasksHandler() {\n    try {\n        yield delay(1000);\n        const exampleTasks = yield call(getExampleTasks);\n        yield put(fetchExampleTasksSuccess(exampleTasks));\n    } catch (error) {\n        yield put(fetchExampleTasksError());\n        yield call(alert, \"Przepraszamy, coś poszło nie tak!\");\n    }\n}\n\nfunction* saveTasksInLocalStorageHandler() {\n    const tasks = yield select(selectTasks);\n    yield call(saveTasksInLocalStorage, tasks);\n}\n\nexport function* watchFetchExampleTasks() {\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n};","import { all } from \"redux-saga/effects\";\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\n\nexport default function* rootSaga() {\n\n    yield all([\n        watchFetchExampleTasks(),\n    ]);\n}","import { configureStore } from \"@reduxjs/toolkit\";\nimport taskReducer from \"./features/tasks/tasksSlice\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n    reducer: {\n        tasksData: taskReducer,\n    },\n    middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from './theme';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","export const theme = {\n    colors: {\n        backgroundColor: \"white\",\n        teal: \"#008080\",\n        tealDark: \"#007070\",\n        lightGrey: \"#ccc\",\n        concrete: \"#F2F2F2\",\n    },\n\n    breakpoints: {\n        mobile: 767,\n    }\n};","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\n\nconst tasksSlice = createSlice({\n    name: \"tasksData\",\n    initialState: {\n        tasks: getTasksFromLocalStorage(),\n        hideDone: false,\n        loading: false,\n    },\n\n    reducers: {\n        addTask: ({ tasks }, { payload: task }) => {\n            tasks.push(task);\n        },\n\n        toggleHideDone: state => {\n            state.hideDone = !state.hideDone;\n        },\n\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\n            const index = tasks.findIndex(({ id }) => id === taskId);\n            tasks[index].done = !tasks[index].done;\n        },\n\n        setAllDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = true;\n            }\n        },\n\n        removeTask: ({ tasks }, { payload: taskId }) => {\n            const index = tasks.findIndex(({ id }) => id === taskId);\n            tasks.splice(index, 1);\n        },\n\n        fetchExampleTasks: state => {\n            state.loading = true;\n        },\n\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\n            state.tasks = tasks;\n            state.loading = false;\n        },\n\n        fetchExampleTasksError: state => {\n            state.loading = false;\n        },\n    },\n});\n\nexport const {\n    addTask,\n    toggleHideDone,\n    toggleTaskDone,\n    setAllDone,\n    removeTask,\n    fetchExampleTasks,\n    fetchExampleTasksSuccess,\n    fetchExampleTasksError,\n} = tasksSlice.actions;\n\nconst selectTasksState = state => state.tasksData;\n\nexport const selectTasks = state => selectTasksState(state).tasks;\nexport const selectHideDone = state => selectTasksState(state).hideDone;\nexport const selectLoading = state => selectTasksState(state).loading;\nexport const selectIsTaskListEmpty = state => selectTasks(state).length === 0;\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\n\nexport const getTaskById = (state, taskId) =>\n    selectTasks(state).find(({ id }) => id === taskId);\n\nexport const selectTasksByQuery = (state, query) => {\n    const tasks = selectTasks(state);\n\n    if (!query || query.trim === \"\") {\n        return tasks;\n    }\n\n    return tasks.filter(({ content }) =>\n        content.toUpperCase().includes(query.trim().toUpperCase()));\n};\n\n\nexport default tasksSlice.reducer;"],"sourceRoot":""}